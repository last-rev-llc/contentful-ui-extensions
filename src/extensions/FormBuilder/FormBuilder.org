#+TITLE: Form Builder

* Tutorial

Upon loading the appropriate content model you should be greeted with something which looks similar to the following:

[[./images/overview.png]]

** General section
*** Form type
gives us the ability to select the form provider (where will the data get sent)
Upon selecting specific providers we'll be able to input a formId or portalId (hubspot)

*** Edit & Copy buttons
The edit button allows to manually edit the JSON, this is an advanced feature as it can be easy
to make a mistake while manually editing the form data.

The copy button copies the raw JSON from the form to enable ease of pasting to another content model.

** Form Setup section

This is the real meat of our form builder software.
The following image gives a breakdown of the components:

[[./images/overview_description.png]]


*** Creating a step
Clicking "Add step" adds a template step which can be edited by clicking anywhere on the main body of the step.

Steps can have ~dependsOn~ logic, please see the appropriate section

*** Creating a field
Clicking the small plus button below the last field adds a template field which can be edited by clicking anywhere on the main body of the field.

Fields by default have the following attributes:
 - Label (what will be displayed to the user)
 - Key (where the value will be saved in the formState)
 - Type (which type of field to render to the user)

Fields can have ~dependsOn~ logic, please see the appropriate section

For some field types, other input fields will appear automatically. For more information on field types please see the documentation here:

[[https://github.com/Impossible-Foods/impossiblefoods.com/blob/master/src/components/ModuleForm/DynamicForm/Fields/Fields.org][Field documentation]]

** dependsOn
Fields & steps can be toggled on and off by using dependsOn logic.
Currently we use [[http://jsonlogic.com/][jsonLogic]] which is a JSON enabled programming structure. In future we hope to improve this with a more user-friendly approach.

To begin edit any step or field and click "Enable ~dependsOn~"

You will see a few new text fields appear:

- Depends on
- Tests (if you have added some)

An example of a depends on logic might be the following:

#+BEGIN_SRC json
{
    "!!": { "var": "isCustomBusiness" }
}
#+END_SRC

Which would enable the step or field when someone has selected ~isCustomBusiness~ (which would be set from another field key).

This offers quite a robust and detailed process as we can toggle other items based on more complex logic such as:

#+BEGIN_SRC json
{
  "and": [
    { ">": [{ "var": "age" }, 20] },
    { "==": [{ "var": "gender" }, "male"] },
    { "==": [{ "var": "country" }, "USA"] }
  ]
}
#+END_SRC

Which would only enable the step or field if the following are true
- User is older than 20 AND
- User is male AND
- User is in the USA

** Video
[[https://streamable.com/ufuns4]]


